using Microsoft.Office.Core;

using Extensibility;

using System.Runtime.InteropServices;

using EnvDTE;

using System.IO;

#region " Read me for Add-in installation and setup information. ";

// When run, the Add-in wizard prepared the registry for the Add-in.

// At a later time, if the Add-in becomes unavailable for reasons such as:

//   1) You moved this project to a computer other than which is was originally created on.

//   2) You chose 'Yes' when presented with a message asking if you wish to remove the Add-in.

//   3) Registry corruption.

// you will need to re-register the Add-in by building the VbNetHowTo_ExampleAddInSetup project 

// by right clicking the project in the Solution Explorer, then choosing install.

#endregion

<GuidAttribute("F48605ED-0D87-4B56-8900-3667735CC071"), ProgIdAttribute("HowTo_ExampleAddIn.Connect")> _;

public class Connect;

    : Extensibility.IDTExtensibility2;

    : IDTCommandTarget;

    applicationObject EnvDTE.DTE;

    addInInstance EnvDTE.AddIn;

    // Declare variables for How-To.

    private m_Events EnvDTE.Events;

    private m_SolutionEvents EnvDTE.SolutionEvents;

    private m_BuildEvents EnvDTE.BuildEvents;

    // This subroutine is fired when a project or solution is built or rebuilt.

    private void m_BuildEvents_OnBuildBegin(Scope EnvDTE.vsBuildScope, Action EnvDTE.vsBuildAction) m_BuildEvents.OnBuildBegin;

        WriteEvent("Build Beginning. Action: " + Action.ToString());

    }

    // This subroutine is fired when a solution is closing. It simply makes a

    //   log entry of the event.

    private void m_SolutionEvents_AfterClosing() m_SolutionEvents.AfterClosing;

        WriteEvent("Solution Closed: " + applicationObject.Solution.FullName);

    }

    // This subroutine is fired when a solution is opened. It simply makes a

    //   log entry of the event.

    private void m_SolutionEvents_Opened() m_SolutionEvents.Opened;

        WriteEvent("Solution Opened: " + applicationObject.Solution.FullName);

    }

    // This subroutine is fired when a project is added to a solution. 

    //   It simply makes a log entry of the event.

    private void m_SolutionEvents_ProjectAdded(Project EnvDTE.Project) m_SolutionEvents.ProjectAdded;

        WriteEvent("Project Added: " + Project.FullName);

    }

    // This subroutine is fired when a project is removed from a solution. 

    //   It simply makes a log entry of the event.

    private void m_SolutionEvents_ProjectRemoved(Project EnvDTE.Project) m_SolutionEvents.ProjectRemoved;

        WriteEvent("Project Removed: " + Project.FullName);

    }

    // This subroutine is fired when a project in a solution is renamed. 

    //   It simply makes a log entry of the event.

    private void m_SolutionEvents_ProjectRenamed(Project EnvDTE.Project, OldName string) m_SolutionEvents.ProjectRenamed;

        WriteEvent("Project Renamed: " + Project.FullName + " from " + OldName);

    }

    // Automatically generated by the Wizard. This subroutine is needed to 

    //   implement the Extensibility.IDTExtensibility2 interface.

    public void OnAddInsUpdate(ByRef custom System.Array) : Extensibility.IDTExtensibility2.OnAddInsUpdate;

    }

    // Automatically generated by the Wizard. This subroutine is needed to 
    //   implement the Extensibility.IDTExtensibility2 interface.

    public void OnBeginShutdown(ByRef custom System.Array) : Extensibility.IDTExtensibility2.OnBeginShutdown;

    }

    // Automatically generated by the Wizard. This subroutine is needed to 
    //   implement the Extensibility.IDTExtensibility2 interface.

    public void OnConnection(application Object, connectMode Extensibility.ext_ConnectMode, addInInst Object, ref custom System.Array) : Extensibility.IDTExtensibility2.OnConnection;

        applicationObject = CType(application, EnvDTE.DTE);

        addInInstance = CType(addInInst, EnvDTE.AddIn);

        if connectMode = Extensibility.ext_ConnectMode.ext_cm_UISetup {

            objAddIn AddIn = CType(addInInst, AddIn);

            CommandObj Command;

            // When run, the Add-in wizard prepared the registry for the Add-in.

            // At a later time, the Add-in or its commands may become unavailable for reasons such as:

            //   1) You moved this project to a computer other than which is was originally created on.

            //   2) You chose 'Yes' when presented with a message asking if you wish to remove the Add-in.

            //   3) You add new commands or modify commands already defined.

            // You will need to re-register the Add-in by building the HowTo_ExampleAddInSetup project,

            // right-clicking the project in the Solution Explorer, and then choosing install.

            // Alternatively, you could execute the ReCreateCommands.reg file the Add-in Wizard generated in

            // the project directory, or run 'devenv /setup' from a command prompt.

            try {

                CommandObj = applicationObject.Commands.AddNamedCommand(objAddIn, "HowTo_ExampleAddIn", "HowTo_ExampleAddIn", "Executes the command for HowTo_ExampleAddIn", true, 59, null, 1 + 2)  '1+2 == vsCommandStatusSupported+vsCommandStatusEnabled;

                CommandObj.AddControl(applicationObject.CommandBars.Item("Tools"));

           } catch( e System.Exception;

            }

        }

        // Add code for How-To.

        // Initialize all the variables that contain the events we're looking for.

        // Get the events object that contains information about all of the 

        //   extensibility events.

        m_Events = CType(application, _DTE).Events;

        // Initialize a variable to track SolutionEvents

        m_SolutionEvents = m_Events.SolutionEvents;

        // Initialize a variable to track BuildEvents

        m_BuildEvents = m_Events.BuildEvents;

    }

    // Automatically generated by the Wizard. This subroutine is needed to 

    //   implement the Extensibility.IDTExtensibility2 interface.

    public void OnDisconnection(RemoveMode Extensibility.ext_DisconnectMode, ref custom System.Array) : Extensibility.IDTExtensibility2.OnDisconnection;

    }

    // Automatically generated by the Wizard. This subroutine is needed to 

    //   implement the Extensibility.IDTExtensibility2 interface.

    public void OnStartupComplete(ByRef custom System.Array) : Extensibility.IDTExtensibility2.OnStartupComplete;

    }

    // Automatically generated by the Wizard. This subroutine is needed to 

    //   implement the Extensibility.IDTExtensibility2 interface.

    public void Exec(cmdName string, executeOption vsCommandExecOption, ref varIn Object, ref varOut Object, ref handled bool) : IDTCommandTarget.Exec;

        handled = false;

        if (executeOption = vsCommandExecOption.vsCommandExecOptionDoDefault) {

            if cmdName = "HowTo_ExampleAddIn.Connect.HowTo_ExampleAddIn" {

                handled = true;

                return;

            }

        }

    }

    // Automatically generated by the Wizard. This subroutine is needed to 

    //   implement the Extensibility.IDTExtensibility2 interface.

    public void QueryStatus(cmdName string, neededText vsCommandStatusTextWanted, ref statusOption vsCommandStatus, ref commandText Object) : IDTCommandTarget.QueryStatus;

        if neededText = EnvDTE.vsCommandStatusTextWanted.vsCommandStatusTextWantedNone {

            if cmdName = "HowTo_ExampleAddIn.Connect.HowTo_ExampleAddIn" {

                statusOption = CType(vsCommandStatus.vsCommandStatusEnabled + vsCommandStatus.vsCommandStatusSupported, vsCommandStatus);

            else {

                statusOption = vsCommandStatus.vsCommandStatusUnsupported;

            }

        }

    }

    // Code for How-To

    // This subroutine writes events to a File in the System directory.  

    //   It connects and disconnects to the file rapidly possible, since       

    //   the file may be shared by many running instances of VS.NET

    private void WriteEvent(message string);

        try {

            // Create a StramWriter.

            mySW = new StreamWriter(Environment.SystemDirectory + _;

                "\IdeLog.txt", true);

            // Write the time to the output file.

            mySW.WriteLine(Now().ToShortDatestring() + " - " + _;

                Now().ToShortTimestring());

            // Write the message and a carriage return to the file.

            mySW.WriteLine(message);

            mySW.writeline(Environment.NewLine);

            // Flush the file and close it.

            mySW.Flush();

            mySW.Close();

       } catch( ex Exception;

            // Report the error to the user.

            MessageBox.Show("The log could not be written to.", MsgBoxStyle.OKOnly, _;

                "How-To Create a VS.NET Add-in");

        }

    }

}

